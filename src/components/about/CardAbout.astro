---
const {
  description: _description,
  totalYears: _totalYears,
  nationality: _nationality,
  iLiveIn: _iLiveIn
} = Astro.props as {
  description?: string;
  totalYears?: number;
  nationality?: string;
  iLiveIn?: string;
};

// Normalizar props (evitar `undefined`)
const description: string = _description ?? '';
const totalYears: number = _totalYears ?? 0;
const nationality: string = _nationality ?? '';
const iLiveIn: string = _iLiveIn ?? '';

/* ------------------ Helpers (typed) ------------------ */
function extractCountry(input?: string): string {
  if (!input) return '';
  let s = String(input).trim();
  // si viene "Ciudad, Pa√≠s" devolvemos "Pa√≠s"
  if (s.includes(',')) {
    s = s.split(',').pop() ?? s;
  }
  // quitar par√©ntesis u otras notas: "Spain (es)" -> "Spain"
  s = s.replace(/\(.+?\)/g, '').trim();
  return s;
}

function removeDiacritics(s: string): string {
  try {
    return s.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
  } catch {
    return s;
  }
}

/* Raw map con variantes legibles (puede contener tildes) */
const rawNameToIso: Record<string, string> = {
  'Colombia': 'CO',
  'Espa√±a': 'ES',
  'Spain': 'ES',
  'Mexico': 'MX',
  'M√©xico': 'MX',
  'United States': 'US',
  'USA': 'US',
  'United States of America': 'US',
  'United Kingdom': 'GB',
  'UK': 'GB',
  'England': 'GB',
  'Germany': 'DE',
  'Deutschland': 'DE',
  'France': 'FR',
  'Italy': 'IT',
  'Portugal': 'PT',
  'Brazil': 'BR',
  'Brasil': 'BR',
  'Argentina': 'AR',
  'Chile': 'CL',
  'Peru': 'PE',
  'Per√∫': 'PE',
  'Netherlands': 'NL',
  'Belgium': 'BE',
  'Ireland': 'IE',
  'Australia': 'AU',
  'Canada': 'CA',
  'New Zealand': 'NZ'
  // a√±ade aqu√≠ m√°s entradas seg√∫n necesites
};

/* Normalizamos el mapa a claves sin diacr√≠ticos y en min√∫scula */
const nameToIso: Record<string, string> = {};
Object.entries(rawNameToIso).forEach(([name, iso]) => {
  const key = removeDiacritics(name).toLowerCase();
  nameToIso[key] = iso;
});

/* Convierte ISO2 en emoji de bandera */
function isoToFlagEmoji(iso?: string): string {
  if (!iso || iso.length !== 2) return 'üåç';
  const OFFSET = 0x1F1E6;
  const chars = iso.toUpperCase().split('').map(ch => {
    const code = ch.charCodeAt(0);
    if (code >= 65 && code <= 90) return OFFSET + (code - 65);
    return NaN;
  }).filter(n => !Number.isNaN(n)) as number[];
  if (chars.length !== 2) return 'üåç';
  return String.fromCodePoint(chars[0], chars[1]);
}

/* Busca el emoji a partir de un texto libre (ej: "Cali, Colombia" -> üá®üá¥) */
function countryEmojiFromText(text?: string): string {
  const countryRaw = extractCountry(text);
  if (!countryRaw) return 'üåç';
  const key = removeDiacritics(countryRaw).toLowerCase();
  let iso = nameToIso[key];

  // fallback: intentar primera/√∫ltima palabra si no hay match exacto
  if (!iso && key.includes(' ')) {
    const parts = key.split(/\s+/);
    iso = nameToIso[parts[parts.length - 1]] ?? nameToIso[parts[0]];
  }

  return iso ? isoToFlagEmoji(iso) : 'üåç';
}

/* Computed (siempre strings) */
const natCountry: string = extractCountry(nationality);
const natEmoji: string = countryEmojiFromText(nationality);
const liveCountry: string = extractCountry(iLiveIn);
const liveEmoji: string = countryEmojiFromText(iLiveIn);
const displayNat: string = natCountry || nationality || 'N/A';
const displayLive: string = liveCountry || iLiveIn || 'N/A';
/* ----------------------------------------------------- */
---

<article class="w-full max-w-5xl mx-auto">
  <div class="bg-sky-50 shadow-md rounded-2xl p-6 md:p-8 grid gap-6 md:grid-cols-3 items-center">
    <!-- LEFT: years badge -->
    <div class="md:col-span-1 flex items-center justify-center">
      <div class="inline-flex items-center gap-3 bg-white/60 rounded-full px-4 py-2 shadow-sm">
        <span class="text-2xl" aria-hidden>üöÄ</span>
        <div class="text-left">
          <div class="text-sm text-sky-600 font-semibold">{totalYears}+ a√±os</div>
          <div class="text-xs text-gray-500">de experiencia</div>
        </div>
      </div>
    </div>

    <!-- MIDDLE / RIGHT: detalles y descripci√≥n -->
    <div class="md:col-span-2">
      <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div class="flex items-center gap-4">
          <!-- Nacionalidad -->
          <div class="inline-flex items-center gap-2 px-2 py-1 rounded">
            <span class="text-xl" aria-hidden>{natEmoji}</span>
            <span class="text-sm font-medium text-sky-900" title={displayNat}>
              {displayNat}
            </span>
          </div>

          <!-- flecha (solo en md+) -->
          <div class="hidden md:block text-2xl text-gray-300">‚Üí</div>

          <!-- Vivo en -->
          <div class="inline-flex items-center gap-2 px-2 py-1 rounded">
            <span class="text-xl" aria-hidden>{liveEmoji}</span>
            <span class="text-sm font-medium text-sky-900" title={displayLive}>
              {displayLive}
            </span>
          </div>
        </div>

        <div class="text-right">
          <span class="text-xs text-gray-500">Disponible para proyectos</span>
        </div>
      </div>

      <!-- Separador -->
      <div class="w-full h-px bg-gradient-to-r from-transparent via-sky-400 to-transparent my-4"></div>

      <!-- Descripci√≥n -->
      <p class="text-gray-600 leading-relaxed">
        {description}
      </p>
    </div>
  </div>
</article>
