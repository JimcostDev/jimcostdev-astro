---
// LoadingModal.astro (light, client:load). No TS en el script, solo props en frontmatter.
const {
  islandsCount = 6,
  healthUrl = 'https://jimcostdev.koyeb.app/healthcheck',
  timeoutMs = 12000
} = Astro.props as {
  islandsCount?: number;
  healthUrl?: string;
  timeoutMs?: number;
};
---
<!-- El componente se hidrata en cliente para ejecutar su script -->
<div
  id="loading-modal"
  data-islands-count={String(islandsCount)}
  data-health-url={healthUrl}
  data-timeout-ms={String(timeoutMs)}
  class="fixed inset-0 z-50 flex items-center justify-center bg-[rgba(0,0,0,0.70)]"
  role="status"
  aria-live="polite"
>
  <div class="bg-sky-50 rounded-xl p-6 w-[320px] max-w-[90%] text-center shadow-xl">
    <div class="flex flex-col items-center gap-4">
      <div id="loading-spinner" style="width:48px;height:48px;border:4px solid rgba(0,0,0,0.08);border-top-color:#03A9F4;border-radius:50%;animation:spin 1s linear infinite;"></div>
      <div class="text-lg font-semibold">Cargando perfil…</div>
      <div class="text-sm text-gray-500">Estamos cargando tus datos. Esto puede tardar unos instantes.</div>
      <div id="loading-progress" class="text-xs text-gray-400 mt-2">Iniciando...</div>
    </div>
  </div>
</div>

<!-- script en JS puro (no TS) que lee datos desde dataset para evitar problemas de tipado -->
<script type="module">
  (function () {
    const modal = document.getElementById('loading-modal');
    if (!modal) return;

    const islandsNeeded = Number(modal.dataset.islandsCount || 0) || 0;
    const healthUrl = modal.dataset.healthUrl || '';
    const timeoutMs = Number(modal.dataset.timeoutMs || 12000);
    const progress = document.getElementById('loading-progress');

    let count = 0;
    let closed = false;

    function hideModal(reason) {
      if (closed) return;
      closed = true;
      modal.style.transition = 'opacity 260ms ease';
      modal.style.opacity = '0';
      setTimeout(() => modal.remove(), 300);
      console.info('[LoadingModal] ocultado por:', reason);
    }

    function onIslandReady(e) {
      count += 1;
      if (progress) progress.textContent = `Cargando módulos: ${count}/${islandsNeeded}`;
      if (islandsNeeded > 0 && count >= islandsNeeded) hideModal('all-islands-ready');
    }
    window.addEventListener('island-ready', onIslandReady);

    // Healthcheck: intenta cerrar si la API responde OK (no bloqueante)
    async function checkHealth() {
      if (!healthUrl) return;
      try {
        const r = await fetch(healthUrl, { cache: 'no-store' });
        if (r.ok) hideModal('health-ok');
      } catch (err) {
        // no hacer nada, hay timeout fallback
        console.warn('[LoadingModal] healthcheck failed', err);
      }
    }

    // Poll corto
    (async () => {
      await new Promise(res => setTimeout(res, 400)); checkHealth();
      await new Promise(res => setTimeout(res, 600)); checkHealth();
      await new Promise(res => setTimeout(res, 1000)); checkHealth();
    })();

    // Fallback por timeout
    const t = setTimeout(() => hideModal('timeout'), timeoutMs);

    // Cerrar en window.load como fallback
    window.addEventListener('load', () => {
      if (!closed) setTimeout(() => hideModal('window-load'), 500);
    });

    // Cleanup
    window.addEventListener('beforeunload', () => {
      window.removeEventListener('island-ready', onIslandReady);
      clearTimeout(t);
    });
  })();
</script>

<style>
@keyframes spin { to { transform: rotate(360deg); } }
</style>
